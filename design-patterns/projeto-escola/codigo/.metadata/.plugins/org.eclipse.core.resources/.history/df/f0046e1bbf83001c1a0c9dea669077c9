package entidadeDAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import entidades.Aluno;
import interfaces.InterfaceDAO;
import util.Conexao;

public class AlunoDAO implements InterfaceDAO<Aluno>
{

//	monta e executa a query que irá salvar o aluno no banco de dados
	@Override
	public boolean executaSalvarBD(Aluno x)
	{
		Connection con = Conexao.conectar();

		String sql =  "insert into aluno(nm_aluno, nm_mae, nm_pai, dt_nascimento, media_aluno, fl_situacao_aluno) "
					+ "values(?,?,?,?,?,?)";

		try 
		{
			PreparedStatement stm = con.prepareStatement(sql);
			
			stm.setString(1, x.getNomeAluno());
			stm.setString(2, x.getNomeMae());
			stm.setString(3, x.getNomePai());
			stm.setObject(4, x.getDataNasc());
			stm.setDouble(5, x.getMediaAluno());
			stm.setString(6, String.valueOf(x.getSituacaoAluno()));
			
			stm.execute();
		} 
		catch (SQLException e)
		{
			e.printStackTrace();
		}
		finally
		{
			Conexao.closeConexao();
		}
		
		return true;
	}

//	chama e complementa o método "salvar"
	public boolean salvaAlunoBD(Aluno aluno)
	{
		if (!executaSalvarBD(aluno))
		{
			System.out.println("ALUNO NÃO FOI SALVO NO BANCO DE DADOS");
			return false;
		}
		
		System.out.println("ALUNO SALVO COM SUCESSO NO BANCO DE DADOS.");
		return true;
	}

	

//	monta e executa a query que ira dar update em dados de um aluno no banco de dados 
	@Override
	public boolean executaUpdateBD(Aluno x) 
	{
		String sql = "update aluno set nm_aluno = ?, nm_mae = ?, nm_pai = ?,"
				   + "dt_nascimento = ?, media_aluno = ?, fl_situacao_aluno = ? "
				   + "where cd_aluno = ?" ;
		
		PreparedStatement stm;
		try 
		{
			stm = Conexao.conectar().prepareStatement(sql);
			stm.setString(1, x.getNomeAluno());
			stm.setString(2, x.getNomeMae());
			stm.setString(3, x.getNomePai());
			stm.setObject(4, x.getDataNasc());
			stm.setDouble(5, x.getMediaAluno());
			stm.setString(6, String.valueOf(x.getSituacaoAluno()));
			stm.setInt(7, x.getCodigoAluno());
			stm.execute();
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		finally
		{
			Conexao.closeConexao();
		}
		
		return true;
	}

	public boolean alteraDadosAlunoBD(int id)
	{
		// retorna um objeto de aluno buscado pelo id
		Aluno aluno = new AlunoDAO().retornaUmObjetoBD(id);
		
		// lê um novo nome para o aluno
		Scanner teclado = new Scanner(System.in);
		String novoNomeAluno = teclado.nextLine();
		aluno.setNomeAluno(novoNomeAluno);
		
		teclado.close();
		
		if (!executaUpdateBD(aluno))
		{
			System.out.println("OS DADOS DO ALUNO NÃO FORAM ALTERADOS. FALHA");
			return false;
		}
		
		System.out.println("DADOS ALTERADOS SALVOS COM SUCESSO NO BANCO DE DADOS.");
		return true;
	}
	
	
	@Override
	public boolean executaExcluirBD(Aluno x) {
		// TODO Auto-generated method stub
		return false;
	}

	
	/*
	 * CREATE TABLE Aluno (
    cd_aluno integer auto_increment,
    nm_aluno varchar(40) NOT NULL,
    nm_mae varchar(40),
    nm_pai varchar(40),
    dt_nascimento Date NOT NULL,
    media_aluno decimal(4,2),
    fl_situacao_aluno char(01),
    PRIMARY KEY (cd_aluno)
);
	 */
	@Override
	public Aluno retornaUmObjetoBD(int id) 
	{
		Aluno aluno = null;
		
		String sql = "select * from aluno where cd_aluno = " + id;
		try 
		{
			PreparedStatement stm = Conexao.conectar().prepareStatement(sql);

			ResultSet rs = stm.executeQuery();

			if (rs.next()) 
			{
				aluno = new Aluno(rs.getInt("cd_aluno"),
								  rs.getString("nm_aluno"),
							  	  rs.getString("nm_mae"),
								  rs.getString("nm_pai"),
								  rs.getObject("dt_nascimento", LocalDate.class),
								  rs.getString("fl_situacao_aluno"),
								  rs.getDouble("media_aluno"));
			}
		}
		catch (SQLException e)
		{
			e.printStackTrace();
		}
		finally
		{
			Conexao.closeConexao();
		}
		
		return aluno;
	}

	@Override
	public List<Aluno> retornarTodosBD() {
		// TODO Auto-generated method stub
		return null;
	}

	
}
